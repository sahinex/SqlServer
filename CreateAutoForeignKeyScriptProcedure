CREATE FUNCTION [dbo].[GetColumnReferenceTable]
(
    @ColumnName nvarchar(200)
)
RETURNS VARCHAR(500)
AS
BEGIN
   declare @ReferenceTable as nvarchar(200);
   declare @KeepValues as nvarchar(200) = '%[^ ][A-Z]%'
   declare @TableControl int = 0; 
   while PatIndex(@KeepValues collate Latin1_General_Bin, @ColumnName) > 0
   set @ColumnName = Stuff(@ColumnName, PatIndex(@KeepValues collate Latin1_General_Bin, @ColumnName) + 1, 0, ' ')   
   declare @SplitCount int = (select COUNT(*) from [SplitString](@ColumnName,''))
   while PatIndex(@KeepValues collate Latin1_General_Bin, @ColumnName) > 0

   set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)

   if @TableControl = 0  
   begin
		select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id <> @SplitCount
		set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end
      
   if @TableControl = 0 
   begin
		set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (2) and Id <> @SplitCount
	    set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
  end
    
  if @TableControl = 0
   begin
		set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (3,4) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
  end  
  
  if @TableControl = 0
    begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (3,4,5) and Id <> @SplitCount
		set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
	end   
   
   if @TableControl = 0
   begin
       set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (3) and Id <> @SplitCount
       set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
  end     
   
   if @TableControl = 0
   begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (1,2) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end

   if @TableControl = 0
   begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (1,2,3) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end

   if @TableControl = 0
   begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (1,2,3,4) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end

   if @TableControl = 0
   begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (2,3) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end

   if @TableControl = 0
   begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (2,3,4) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end

   if @TableControl = 0
   begin
	    set @ReferenceTable = null; select @ReferenceTable = COALESCE(@ReferenceTable + '', '') + ISNULL([Data],'') from [SplitString](@ColumnName,'') where Id in (2,3,4,5) and Id <> @SplitCount
        set @TableControl = (select count(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' and TABLE_NAME = @ReferenceTable)
   end

   if(CHARINDEX('User',@ReferenceTable) > 0)
   begin
		set @ReferenceTable = 'User';
   end

   if(@TableControl = 0)
   begin
		set @ReferenceTable = NULL
   end

   return @ReferenceTable;
END
GO
GO
CREATE FUNCTION [dbo].[GetTableObjectColumnFKList] 
(	
	-- Add the parameters for the function here
	  @TableName nvarchar(max),	
	  @ColumnName nvarchar(max)
)

RETURNS TABLE 
AS
RETURN 
(
	SELECT  obj.name AS FKName,
    tab1.name AS [TableName],
    col1.name AS [ColumnName],
    tab2.name AS [ReferencedTableName],
    col2.name AS [ReferencedColumnName]
FROM sys.foreign_key_columns fkc
INNER JOIN sys.objects obj
    ON obj.object_id = fkc.constraint_object_id
INNER JOIN sys.tables tab1
    ON tab1.object_id = fkc.parent_object_id
INNER JOIN sys.schemas sch
    ON tab1.schema_id = sch.schema_id
INNER JOIN sys.columns col1
    ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id
INNER JOIN sys.tables tab2
    ON tab2.object_id = fkc.referenced_object_id
INNER JOIN sys.columns col2
    ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id

	where tab1.name = @TableName
	and (col1.name = @ColumnName or '' = @ColumnName)
)
GO

CREATE FUNCTION [dbo].[GetTableObjectColumnList] 
(	
	-- Add the parameters for the function here
	  @TableName nvarchar(max)	
)

RETURNS TABLE 
AS
RETURN 
(
	SELECT 
   c.name ColumnName,
   t.name DataTypeName,
   t.name +
   CASE WHEN t.name IN ('char', 'varchar','nchar','nvarchar') THEN '('+

             CASE WHEN c.max_length=-1 THEN 'MAX'

                  ELSE CONVERT(VARCHAR(4),

                               CASE WHEN t.name IN ('nchar','nvarchar')

                               THEN  c.max_length/2 ELSE c.max_length END )

                  END +')'

          WHEN t.name IN ('decimal','numeric')

                  THEN '('+ CONVERT(VARCHAR(4),c.precision)+','

                          + CONVERT(VARCHAR(4),c.Scale)+')'

                  ELSE '' END

   as DataType,
   cast(c.max_length as int) MaxLengthByte ,
   cast(c.precision as int) Precision,
   cast(c.scale as int) Scale,
   cast(c.is_nullable as bit) IsNullable,
   cast(ISNULL(i.is_primary_key, 0) as bit) IsPrimaryKey,
   cast(ISNULL(i.is_unique, 0) as bit) IsUnique,
   cast(object_definition(c.default_object_id) as nvarchar(max)) AS DefaultValue,
   ds.name DefaultValueConstraintName
FROM    
   sys.columns c
INNER JOIN 
   sys.types t ON c.user_type_id = t.user_type_id
LEFT OUTER JOIN 
   sys.index_columns ic ON ic.object_id = c.object_id AND ic.column_id = c.column_id
LEFT OUTER JOIN 
   sys.indexes i ON ic.object_id = i.object_id AND ic.index_id = i.index_id
LEFT OUTER JOIN
    sys.default_constraints ds  ON c.default_object_id = ds.object_id
WHERE
   c.object_id = OBJECT_ID(@TableName)
)

GO

CREATE PROCEDURE [dbo].[FKControl]
@IsCreateFK bit = 0
AS
BEGIN
		
		IF OBJECT_ID('tempdb..#FKControl') IS NOT NULL DROP TABLE #FKControl		
		CREATE TABLE #FKControl (TableName nvarchar(500), ColumnName nvarchar(250),CreateScript nvarchar(1000),IsFindFKRefTable bit)	

		declare @TableName nvarchar(500);
		declare @ColumnName nvarchar(500);
		declare @FunctionName nvarchar(500);
		declare @TableCursor as cursor;
		declare @ColumnsCursor as cursor;
		set  @TableCursor = cursor for
		SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME
		open  @TableCursor;
		fetch next from  @TableCursor into @TableName
		while @@FETCH_STATUS = 0
		begin					
			    set  @ColumnsCursor = cursor for
			    SELECT ColumnName FROM GetTableObjectColumnList(@TableName) WHERE DataType = 'int' and ColumnName <> 'Id' and  right(ColumnName, 2) = 'Id'
			    open  @ColumnsCursor;
			    fetch next from  @ColumnsCursor into @ColumnName
			    while @@FETCH_STATUS = 0
			    begin
			    
			       declare @FKCount int = (select count(*) FROM dbo.GetTableObjectColumnFKList(@TableName,@ColumnName))
				
				  if(@FKCount = 0)
				  begin

				   declare @FKName nvarchar(250) = '[FK_'+ @TableName +'_'+ replace(@ColumnName,'Id','') +']';

				   declare @RFName nvarchar(250) = (select [dbo].[GetColumnReferenceTable](@ColumnName))

				   declare @IsFindFKRefTable bit = (case when @RFName is not null then 1 else 0 end)

				   declare @FKCreateScript nvarchar(1000) = ('ALTER TABLE [dbo].['+@TableName+']  WITH NOCHECK ADD  CONSTRAINT '+@FKName+' FOREIGN KEY(['+@ColumnName+']) REFERENCES [dbo].['+@RFName+'] ([Id])');

				   insert into #FKControl(TableName,ColumnName,CreateScript,IsFindFKRefTable) values (@TableName,@ColumnName,@FKCreateScript,@IsFindFKRefTable)

				   if(@IsCreateFK = 1 and @IsFindFKRefTable = 1) exec(@FKCreateScript)

				  end						 
		
			    fetch next from  @ColumnsCursor into  @ColumnName
			    end
			    CLOSE @ColumnsCursor;
			    DEALLOCATE @ColumnsCursor;
		
		
		fetch next from  @TableCursor into  @TableName
		end
		CLOSE @TableCursor;
		DEALLOCATE @TableCursor;

		select * from #FKControl

		IF OBJECT_ID('tempdb..#FKControl') IS NOT NULL DROP TABLE #FKControl	

END

